name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock

    - name: Set up test environment
      run: |
        cd backend
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env.test
        echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env.test
        echo "JWT_SECRET_KEY=test_secret" >> .env.test
        echo "ENVIRONMENT=test" >> .env.test
        
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        JWT_SECRET_KEY: test_secret
        ENVIRONMENT: test
      run: |
        cd backend
        # Run AI service tests
        pytest tests/services/test_openai_integration.py --cov=app.services.openai_service
        pytest tests/services/test_agent_behavior_service.py --cov=app.services.agent_behavior_service
        pytest tests/services/test_function_registry.py --cov=app.services.agent_function_service
        # Run all other tests
        pytest --cov=app --cov-report=xml
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Set up test environment
      run: |
        cd frontend
        echo "VITE_API_URL=http://localhost:8000" > .env.test
        echo "VITE_ENVIRONMENT=test" >> .env.test
        
    - name: Run tests
      run: |
        cd frontend
        # Run component tests
        npm run test:components
        # Run integration tests
        npm run test:integration
        # Run all tests with coverage
        npm run test:ci
        
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install Node.js linting tools
      run: |
        cd frontend
        npm ci
        
    - name: Run linters
      run: |
        # Python
        cd backend
        flake8 .
        black --check .
        isort --check-only .
        mypy app
        
        # JavaScript/TypeScript
        cd ../frontend
        npm run lint
        npm run type-check

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor
        args: --file=backend/requirements.txt

    - name: Run npm security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor
        args: --file=frontend/package.json
